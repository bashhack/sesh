🛠️ sesh — Developer Technical Overview

🔍 Summary

sesh is a Go CLI tool that generates AWS session credentials using MFA via TOTP codes, stored securely in macOS Keychain. It shells out to the AWS CLI (aws sts get-session-token) and prints credentials as export statements for shell evaluation (eval "$(sesh)").

💡 Designed for security, simplicity, and zero runtime dependencies
💻 Works on macOS with native Keychain support; Linux support not yet implemented
🧙 Includes first-time wizard (--setup) to guide users through MFA provisioning and secret storage
🧱 Project Structure

.
├── cmd/sesh/main.go             # CLI entrypoint, flag parsing
├── internal/aws/auth.go        # AWS CLI interactions: STS and MFA device listing
├── internal/keychain/keychain.go # macOS Keychain integration
├── internal/totp/totp.go       # TOTP code generation (pquerna/otp)
├── internal/setup/setup.go     # Interactive first-time setup wizard
⚙️ How it Works (Flow Summary)

CLI parses flags and env vars for AWS profile, keychain account/service, MFA serial.
If --setup is provided:
Walks user through creating a virtual MFA device in the AWS Console
Prompts for the Base32 MFA secret
Writes it into macOS Keychain with security add-generic-password
On normal execution:
Reads the secret from Keychain (security find-generic-password)
Generates current TOTP code
Calls aws sts get-session-token with the code
Parses the JSON response
Outputs AWS credential exports for use via eval "$(sesh)"
📦 Build/Release Pipeline

make build → builds binary to ./sesh
make release → runs GoReleaser (.goreleaser.yml)
Releasing tags (e.g. v1.0.0) generate multi-arch binaries and GitHub assets
🧪 Testing Considerations

No unit tests implemented yet (only stubbed auth_test.go)
Code is designed to shell out to aws and security — use interfaces or wrappers if unit test coverage is desired
Add test scaffolding to simulate keychain/AWS CLI output via mocks
🔧 Outstanding Technical Tasks


Area	Task	Status
🔐 Cross-platform support	Add GPG/Pass backend for Linux (as fallback to Keychain)	❌ Not Started
🧪 Tests	Add unit tests for each internal package (aws, keychain, totp, setup)	🚧 Needs Scaffolding
💬 UX polish	Gracefully handle shell failures, e.g. AWS CLI not installed, expired creds	🚧 Basic
🗂 Config structure	Optional: support config file ~/.config/sesh/config.json	❌ Future
🧪 AWS detection	Auto-detect AWS CLI config profile list and warn if profile is unset	❌ Not Started
📄 Versioning	Add --version flag and semantic version tracking	❌ Not Started
🍺 Homebrew support	Add a brew tap formula and install path validation script	❌ Not Started
🧪 CI/CD pipeline	Setup GitHub Actions workflow for build/test/release	❌ Not Started
🔐 Security Notes

Keychain use is read-only after initial --setup; secrets are never written unprompted
MFA code is never printed or logged
All subprocess outputs are captured securely (stderr, exit codes checked)
No file-based secrets or credential persistence beyond environment exports
🧠 Design Philosophy

“As close to curl && go as possible.”
No dependencies beyond the Go standard library + one small TOTP lib
No shell scripts, Python, or external CLI dependencies beyond aws
Every piece of setup and authentication logic resides in Go
Let me know if you'd like a CONTRIBUTING.md, GitHub Actions config, or test harness setup next.

IMPORTANT: Show visual feedback to user when running to give them insight into how long their MFA session is active for, etc.
